/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers';
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface MixinTokenURIInterface extends ethers.utils.Interface {
  functions: {
    'baseMetadataURI()': FunctionFragment;
    'owner()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setBaseMetadataURI(string)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'uri(uint256)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'baseMetadataURI',
    values?: void,
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: void): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: void,
  ): string;
  encodeFunctionData(
    functionFragment: 'setBaseMetadataURI',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'uri', values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: 'baseMetadataURI',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setBaseMetadataURI',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'uri', data: BytesLike): Result;

  events: {
    'OwnershipTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
}

export class MixinTokenURI extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MixinTokenURIInterface;

  functions: {
    baseMetadataURI(
      overrides?: CallOverrides,
    ): Promise<{
      0: string;
    }>;

    owner(
      overrides?: CallOverrides,
    ): Promise<{
      0: string;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    setBaseMetadataURI(
      newBaseMetadataURI: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    uri(
      _id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: string;
    }>;
  };

  baseMetadataURI(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  setBaseMetadataURI(
    newBaseMetadataURI: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  uri(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  staticCall: {
    baseMetadataURI(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: Overrides): Promise<void>;

    setBaseMetadataURI(
      newBaseMetadataURI: string,
      overrides?: Overrides,
    ): Promise<void>;

    transferOwnership(newOwner: string, overrides?: Overrides): Promise<void>;

    uri(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null,
    ): EventFilter;
  };

  estimateGas: {
    baseMetadataURI(): Promise<BigNumber>;
    owner(): Promise<BigNumber>;
    renounceOwnership(): Promise<BigNumber>;
    setBaseMetadataURI(newBaseMetadataURI: string): Promise<BigNumber>;
    transferOwnership(newOwner: string): Promise<BigNumber>;
    uri(_id: BigNumberish): Promise<BigNumber>;
  };

  populateTransaction: {
    baseMetadataURI(): Promise<PopulatedTransaction>;
    owner(): Promise<PopulatedTransaction>;
    renounceOwnership(): Promise<PopulatedTransaction>;
    setBaseMetadataURI(
      newBaseMetadataURI: string,
    ): Promise<PopulatedTransaction>;
    transferOwnership(newOwner: string): Promise<PopulatedTransaction>;
    uri(_id: BigNumberish): Promise<PopulatedTransaction>;
  };
}
