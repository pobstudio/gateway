/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import { Contract, ContractFactory, Overrides } from '@ethersproject/contracts';

import { RejectingTreasury } from './RejectingTreasury';

export class RejectingTreasuryFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<RejectingTreasury> {
    return super.deploy(overrides || {}) as Promise<RejectingTreasury>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): RejectingTreasury {
    return super.attach(address) as RejectingTreasury;
  }
  connect(signer: Signer): RejectingTreasuryFactory {
    return super.connect(signer) as RejectingTreasuryFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): RejectingTreasury {
    return new Contract(address, _abi, signerOrProvider) as RejectingTreasury;
  }
}

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    stateMutability: 'nonpayable',
    type: 'fallback',
  },
];

const _bytecode =
  '0x6080604052348015600f57600080fd5b50604880601d6000396000f3fe6080604052348015600f57600080fd5b5000fea264697066735822122069dcc5555b639d89462c6ee2b23e63481367bb0fc5607ecd2abb99ae62ab8f4964736f6c63430007030033';
