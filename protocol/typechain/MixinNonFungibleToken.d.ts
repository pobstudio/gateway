/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers';
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface MixinNonFungibleTokenInterface extends ethers.utils.Interface {
  functions: {
    'getNonFungibleBaseType(uint256)': FunctionFragment;
    'getNonFungibleIndex(uint256)': FunctionFragment;
    'isFungible(uint256)': FunctionFragment;
    'isNonFungible(uint256)': FunctionFragment;
    'isNonFungibleBaseType(uint256)': FunctionFragment;
    'isNonFungibleItem(uint256)': FunctionFragment;
    'ownerOf(uint256)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'getNonFungibleBaseType',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getNonFungibleIndex',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'isFungible',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'isNonFungible',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'isNonFungibleBaseType',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'isNonFungibleItem',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'ownerOf',
    values: [BigNumberish],
  ): string;

  decodeFunctionResult(
    functionFragment: 'getNonFungibleBaseType',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getNonFungibleIndex',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'isFungible', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'isNonFungible',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isNonFungibleBaseType',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isNonFungibleItem',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result;

  events: {};
}

export class MixinNonFungibleToken extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MixinNonFungibleTokenInterface;

  functions: {
    getNonFungibleBaseType(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber;
    }>;

    getNonFungibleIndex(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber;
    }>;

    isFungible(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean;
    }>;

    isNonFungible(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean;
    }>;

    isNonFungibleBaseType(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean;
    }>;

    isNonFungibleItem(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean;
    }>;

    ownerOf(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: string;
    }>;
  };

  getNonFungibleBaseType(
    id: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getNonFungibleIndex(
    id: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  isFungible(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  isNonFungible(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  isNonFungibleBaseType(
    id: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isNonFungibleItem(
    id: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  ownerOf(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  staticCall: {
    getNonFungibleBaseType(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getNonFungibleIndex(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isFungible(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    isNonFungible(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isNonFungibleBaseType(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isNonFungibleItem(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    ownerOf(id: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getNonFungibleBaseType(id: BigNumberish): Promise<BigNumber>;
    getNonFungibleIndex(id: BigNumberish): Promise<BigNumber>;
    isFungible(id: BigNumberish): Promise<BigNumber>;
    isNonFungible(id: BigNumberish): Promise<BigNumber>;
    isNonFungibleBaseType(id: BigNumberish): Promise<BigNumber>;
    isNonFungibleItem(id: BigNumberish): Promise<BigNumber>;
    ownerOf(id: BigNumberish): Promise<BigNumber>;
  };

  populateTransaction: {
    getNonFungibleBaseType(id: BigNumberish): Promise<PopulatedTransaction>;
    getNonFungibleIndex(id: BigNumberish): Promise<PopulatedTransaction>;
    isFungible(id: BigNumberish): Promise<PopulatedTransaction>;
    isNonFungible(id: BigNumberish): Promise<PopulatedTransaction>;
    isNonFungibleBaseType(id: BigNumberish): Promise<PopulatedTransaction>;
    isNonFungibleItem(id: BigNumberish): Promise<PopulatedTransaction>;
    ownerOf(id: BigNumberish): Promise<PopulatedTransaction>;
  };
}
