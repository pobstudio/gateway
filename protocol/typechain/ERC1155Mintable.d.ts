/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers';
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface ERC1155MintableInterface extends ethers.utils.Interface {
  functions: {
    'ERC1155_BATCH_RECEIVED()': FunctionFragment;
    'ERC1155_RECEIVED()': FunctionFragment;
    'balanceOf(address,uint256)': FunctionFragment;
    'balanceOfBatch(address[],uint256[])': FunctionFragment;
    'baseMetadataURI()': FunctionFragment;
    'contractURI()': FunctionFragment;
    'create(bool)': FunctionFragment;
    'createWithType(uint256)': FunctionFragment;
    'exchangesRegistry()': FunctionFragment;
    'getNonFungibleBaseType(uint256)': FunctionFragment;
    'getNonFungibleIndex(uint256)': FunctionFragment;
    'isApprovedForAll(address,address)': FunctionFragment;
    'isFungible(uint256)': FunctionFragment;
    'isNonFungible(uint256)': FunctionFragment;
    'isNonFungibleBaseType(uint256)': FunctionFragment;
    'isNonFungibleItem(uint256)': FunctionFragment;
    'maxIndex(uint256)': FunctionFragment;
    'mintFungible(uint256,address[],uint256[])': FunctionFragment;
    'mintNonFungible(uint256,address[])': FunctionFragment;
    'owner()': FunctionFragment;
    'ownerOf(uint256)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)': FunctionFragment;
    'safeTransferFrom(address,address,uint256,uint256,bytes)': FunctionFragment;
    'setApprovalForAll(address,bool)': FunctionFragment;
    'setBaseMetadataURI(string)': FunctionFragment;
    'setContractURI(string)': FunctionFragment;
    'setCreatorApproval(uint256,address,bool)': FunctionFragment;
    'setExchangesRegistry(address)': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'uri(uint256)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'ERC1155_BATCH_RECEIVED',
    values?: void,
  ): string;
  encodeFunctionData(
    functionFragment: 'ERC1155_RECEIVED',
    values?: void,
  ): string;
  encodeFunctionData(
    functionFragment: 'balanceOf',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'balanceOfBatch',
    values: [string[], BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'baseMetadataURI',
    values?: void,
  ): string;
  encodeFunctionData(functionFragment: 'contractURI', values?: void): string;
  encodeFunctionData(functionFragment: 'create', values: [boolean]): string;
  encodeFunctionData(
    functionFragment: 'createWithType',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'exchangesRegistry',
    values?: void,
  ): string;
  encodeFunctionData(
    functionFragment: 'getNonFungibleBaseType',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getNonFungibleIndex',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'isApprovedForAll',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'isFungible',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'isNonFungible',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'isNonFungibleBaseType',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'isNonFungibleItem',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'maxIndex',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'mintFungible',
    values: [BigNumberish, string[], BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'mintNonFungible',
    values: [BigNumberish, string[]],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: void): string;
  encodeFunctionData(
    functionFragment: 'ownerOf',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: void,
  ): string;
  encodeFunctionData(
    functionFragment: 'safeBatchTransferFrom',
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom',
    values: [string, string, BigNumberish, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'setApprovalForAll',
    values: [string, boolean],
  ): string;
  encodeFunctionData(
    functionFragment: 'setBaseMetadataURI',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setContractURI',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setCreatorApproval',
    values: [BigNumberish, string, boolean],
  ): string;
  encodeFunctionData(
    functionFragment: 'setExchangesRegistry',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'uri', values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: 'ERC1155_BATCH_RECEIVED',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'ERC1155_RECEIVED',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'balanceOfBatch',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'baseMetadataURI',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'contractURI',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'create', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'createWithType',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'exchangesRegistry',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getNonFungibleBaseType',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getNonFungibleIndex',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isApprovedForAll',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'isFungible', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'isNonFungible',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isNonFungibleBaseType',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isNonFungibleItem',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'maxIndex', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'mintFungible',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'mintNonFungible',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'safeBatchTransferFrom',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'safeTransferFrom',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setApprovalForAll',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setBaseMetadataURI',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setContractURI',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setCreatorApproval',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setExchangesRegistry',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'uri', data: BytesLike): Result;

  events: {
    'ApprovalForAll(address,address,bool)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'TransferBatch(address,address,address,uint256[],uint256[])': EventFragment;
    'TransferSingle(address,address,address,uint256,uint256)': EventFragment;
    'URI(string,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransferBatch'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransferSingle'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'URI'): EventFragment;
}

export class ERC1155Mintable extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ERC1155MintableInterface;

  functions: {
    ERC1155_BATCH_RECEIVED(
      overrides?: CallOverrides,
    ): Promise<{
      0: string;
    }>;

    ERC1155_RECEIVED(
      overrides?: CallOverrides,
    ): Promise<{
      0: string;
    }>;

    balanceOf(
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber;
    }>;

    balanceOfBatch(
      owners: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<{
      balances_: BigNumber[];
      0: BigNumber[];
    }>;

    baseMetadataURI(
      overrides?: CallOverrides,
    ): Promise<{
      0: string;
    }>;

    contractURI(
      overrides?: CallOverrides,
    ): Promise<{
      0: string;
    }>;

    create(isNF: boolean, overrides?: Overrides): Promise<ContractTransaction>;

    createWithType(
      type_: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    exchangesRegistry(
      overrides?: CallOverrides,
    ): Promise<{
      0: string;
    }>;

    getNonFungibleBaseType(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber;
    }>;

    getNonFungibleIndex(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber;
    }>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean;
    }>;

    isFungible(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean;
    }>;

    isNonFungible(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean;
    }>;

    isNonFungibleBaseType(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean;
    }>;

    isNonFungibleItem(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean;
    }>;

    maxIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber;
    }>;

    mintFungible(
      id: BigNumberish,
      to: string[],
      quantities: BigNumberish[],
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    mintNonFungible(
      type_: BigNumberish,
      to: string[],
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    owner(
      overrides?: CallOverrides,
    ): Promise<{
      0: string;
    }>;

    ownerOf(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: string;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    setBaseMetadataURI(
      newBaseMetadataURI: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    setCreatorApproval(
      id: BigNumberish,
      creator: string,
      status: boolean,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    setExchangesRegistry(
      newExchangesRegistry: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    supportsInterface(
      _interfaceID: BytesLike,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    uri(
      _id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: string;
    }>;
  };

  ERC1155_BATCH_RECEIVED(overrides?: CallOverrides): Promise<string>;

  ERC1155_RECEIVED(overrides?: CallOverrides): Promise<string>;

  balanceOf(
    owner: string,
    id: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  balanceOfBatch(
    owners: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>;

  baseMetadataURI(overrides?: CallOverrides): Promise<string>;

  contractURI(overrides?: CallOverrides): Promise<string>;

  create(isNF: boolean, overrides?: Overrides): Promise<ContractTransaction>;

  createWithType(
    type_: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  exchangesRegistry(overrides?: CallOverrides): Promise<string>;

  getNonFungibleBaseType(
    id: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getNonFungibleIndex(
    id: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isFungible(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  isNonFungible(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  isNonFungibleBaseType(
    id: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isNonFungibleItem(
    id: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  maxIndex(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  mintFungible(
    id: BigNumberish,
    to: string[],
    quantities: BigNumberish[],
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  mintNonFungible(
    type_: BigNumberish,
    to: string[],
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    values: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  setBaseMetadataURI(
    newBaseMetadataURI: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  setContractURI(
    newContractURI: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  setCreatorApproval(
    id: BigNumberish,
    creator: string,
    status: boolean,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  setExchangesRegistry(
    newExchangesRegistry: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  supportsInterface(
    _interfaceID: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  uri(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  staticCall: {
    ERC1155_BATCH_RECEIVED(overrides?: CallOverrides): Promise<string>;

    ERC1155_RECEIVED(overrides?: CallOverrides): Promise<string>;

    balanceOf(
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    balanceOfBatch(
      owners: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    baseMetadataURI(overrides?: CallOverrides): Promise<string>;

    contractURI(overrides?: CallOverrides): Promise<string>;

    create(isNF: boolean, overrides?: Overrides): Promise<BigNumber>;

    createWithType(type_: BigNumberish, overrides?: Overrides): Promise<void>;

    exchangesRegistry(overrides?: CallOverrides): Promise<string>;

    getNonFungibleBaseType(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getNonFungibleIndex(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isFungible(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    isNonFungible(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isNonFungibleBaseType(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isNonFungibleItem(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    maxIndex(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    mintFungible(
      id: BigNumberish,
      to: string[],
      quantities: BigNumberish[],
      overrides?: Overrides,
    ): Promise<void>;

    mintNonFungible(
      type_: BigNumberish,
      to: string[],
      overrides?: Overrides,
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: Overrides): Promise<void>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides,
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides,
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides,
    ): Promise<void>;

    setBaseMetadataURI(
      newBaseMetadataURI: string,
      overrides?: Overrides,
    ): Promise<void>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides,
    ): Promise<void>;

    setCreatorApproval(
      id: BigNumberish,
      creator: string,
      status: boolean,
      overrides?: Overrides,
    ): Promise<void>;

    setExchangesRegistry(
      newExchangesRegistry: string,
      overrides?: Overrides,
    ): Promise<void>;

    supportsInterface(
      _interfaceID: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferOwnership(newOwner: string, overrides?: Overrides): Promise<void>;

    uri(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    ApprovalForAll(
      _owner: string | null,
      _operator: string | null,
      _approved: null,
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null,
    ): EventFilter;

    TransferBatch(
      _operator: string | null,
      _from: string | null,
      _to: string | null,
      _ids: null,
      _values: null,
    ): EventFilter;

    TransferSingle(
      _operator: string | null,
      _from: string | null,
      _to: string | null,
      _id: null,
      _value: null,
    ): EventFilter;

    URI(_value: null, _id: BigNumberish | null): EventFilter;
  };

  estimateGas: {
    ERC1155_BATCH_RECEIVED(): Promise<BigNumber>;
    ERC1155_RECEIVED(): Promise<BigNumber>;
    balanceOf(owner: string, id: BigNumberish): Promise<BigNumber>;
    balanceOfBatch(owners: string[], ids: BigNumberish[]): Promise<BigNumber>;
    baseMetadataURI(): Promise<BigNumber>;
    contractURI(): Promise<BigNumber>;
    create(isNF: boolean): Promise<BigNumber>;
    createWithType(type_: BigNumberish): Promise<BigNumber>;
    exchangesRegistry(): Promise<BigNumber>;
    getNonFungibleBaseType(id: BigNumberish): Promise<BigNumber>;
    getNonFungibleIndex(id: BigNumberish): Promise<BigNumber>;
    isApprovedForAll(owner: string, operator: string): Promise<BigNumber>;
    isFungible(id: BigNumberish): Promise<BigNumber>;
    isNonFungible(id: BigNumberish): Promise<BigNumber>;
    isNonFungibleBaseType(id: BigNumberish): Promise<BigNumber>;
    isNonFungibleItem(id: BigNumberish): Promise<BigNumber>;
    maxIndex(arg0: BigNumberish): Promise<BigNumber>;
    mintFungible(
      id: BigNumberish,
      to: string[],
      quantities: BigNumberish[],
    ): Promise<BigNumber>;
    mintNonFungible(type_: BigNumberish, to: string[]): Promise<BigNumber>;
    owner(): Promise<BigNumber>;
    ownerOf(id: BigNumberish): Promise<BigNumber>;
    renounceOwnership(): Promise<BigNumber>;
    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
    ): Promise<BigNumber>;
    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
    ): Promise<BigNumber>;
    setApprovalForAll(operator: string, approved: boolean): Promise<BigNumber>;
    setBaseMetadataURI(newBaseMetadataURI: string): Promise<BigNumber>;
    setContractURI(newContractURI: string): Promise<BigNumber>;
    setCreatorApproval(
      id: BigNumberish,
      creator: string,
      status: boolean,
    ): Promise<BigNumber>;
    setExchangesRegistry(newExchangesRegistry: string): Promise<BigNumber>;
    supportsInterface(_interfaceID: BytesLike): Promise<BigNumber>;
    transferOwnership(newOwner: string): Promise<BigNumber>;
    uri(_id: BigNumberish): Promise<BigNumber>;
  };

  populateTransaction: {
    ERC1155_BATCH_RECEIVED(): Promise<PopulatedTransaction>;
    ERC1155_RECEIVED(): Promise<PopulatedTransaction>;
    balanceOf(owner: string, id: BigNumberish): Promise<PopulatedTransaction>;
    balanceOfBatch(
      owners: string[],
      ids: BigNumberish[],
    ): Promise<PopulatedTransaction>;
    baseMetadataURI(): Promise<PopulatedTransaction>;
    contractURI(): Promise<PopulatedTransaction>;
    create(isNF: boolean): Promise<PopulatedTransaction>;
    createWithType(type_: BigNumberish): Promise<PopulatedTransaction>;
    exchangesRegistry(): Promise<PopulatedTransaction>;
    getNonFungibleBaseType(id: BigNumberish): Promise<PopulatedTransaction>;
    getNonFungibleIndex(id: BigNumberish): Promise<PopulatedTransaction>;
    isApprovedForAll(
      owner: string,
      operator: string,
    ): Promise<PopulatedTransaction>;
    isFungible(id: BigNumberish): Promise<PopulatedTransaction>;
    isNonFungible(id: BigNumberish): Promise<PopulatedTransaction>;
    isNonFungibleBaseType(id: BigNumberish): Promise<PopulatedTransaction>;
    isNonFungibleItem(id: BigNumberish): Promise<PopulatedTransaction>;
    maxIndex(arg0: BigNumberish): Promise<PopulatedTransaction>;
    mintFungible(
      id: BigNumberish,
      to: string[],
      quantities: BigNumberish[],
    ): Promise<PopulatedTransaction>;
    mintNonFungible(
      type_: BigNumberish,
      to: string[],
    ): Promise<PopulatedTransaction>;
    owner(): Promise<PopulatedTransaction>;
    ownerOf(id: BigNumberish): Promise<PopulatedTransaction>;
    renounceOwnership(): Promise<PopulatedTransaction>;
    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
    ): Promise<PopulatedTransaction>;
    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
    ): Promise<PopulatedTransaction>;
    setApprovalForAll(
      operator: string,
      approved: boolean,
    ): Promise<PopulatedTransaction>;
    setBaseMetadataURI(
      newBaseMetadataURI: string,
    ): Promise<PopulatedTransaction>;
    setContractURI(newContractURI: string): Promise<PopulatedTransaction>;
    setCreatorApproval(
      id: BigNumberish,
      creator: string,
      status: boolean,
    ): Promise<PopulatedTransaction>;
    setExchangesRegistry(
      newExchangesRegistry: string,
    ): Promise<PopulatedTransaction>;
    supportsInterface(_interfaceID: BytesLike): Promise<PopulatedTransaction>;
    transferOwnership(newOwner: string): Promise<PopulatedTransaction>;
    uri(_id: BigNumberish): Promise<PopulatedTransaction>;
  };
}
